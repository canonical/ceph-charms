name: Build/Test

on:
  workflow_call:

jobs:
  modifiedparts:
    runs-on: ubuntu-latest
    outputs:
      parts: ${{steps.changed-parts.outputs.parts }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get modified files
        id: changed-files
        uses: tj-actions/changed-files@v35

      - name: Set output
        id: changed-parts
        run: |
          components=()
          # Retrieve components with a 'tox.ini' file.
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            component=$(echo "$file" | cut -d "/" -f1)
            if [[ -f "./$component/tox.ini" ]]; then
              components="$components $component"
            fi
          done
          
          components=($components)
          components=`echo "${components[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '`
          components=($components)
          modified_parts=`jq --compact-output --null-input '$ARGS.positional' --args -- "${components[@]}"`
          echo "Modified parts: $modified_parts"
          echo "parts=$modified_parts" >> $GITHUB_OUTPUT

  build:
    needs: modifiedparts
    name: Build the charm
    runs-on: ubuntu-latest
    if: ${{ needs.modifiedparts.output.parts != '[]' }}
    strategy:
      matrix:
        part: ${{ fromJson(needs.modifiedparts.outputs.parts) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get -qq install libxslt-dev libxml2-dev python3-lxml tox

      - name: Run linters
        run: tox -c ${{ matrix.part }} -e pep8

      - name: Run unit tests
        run: tox -c ${{ matrix.part }} -e py3

      - name: Setup LXD
        uses: canonical/setup-lxd@v0.1.1
        with:
          channel: 5.21/stable

      - name: Build charm(s)
        id: builder
        run: |
          sudo snap install charmcraft --classic
          tox -c ${{ matrix.part }} -e build

      - name: Upload built charm
        uses: actions/upload-artifact@v3
        with:
          name: charms
          path: "./${{ matrix.part }}/*.charm"

  functional-test:
    needs:
      - modifiedparts
      - build
    name: Functional tests
    runs-on: self-hosted
    if: ${{ needs.modifiedparts.output.parts != '[]' }}
    strategy:
      matrix:
        part: ${{ fromJson(needs.modifiedparts.outputs.parts) }}
    steps:
      - name: Download charm
        uses: actions/download-artifact@v3
        with:
          name: charms
          path: ~/artifacts/

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup LXD
        run: |
          if [[ "$(snap list | grep -c lxd)" -eq 0 ]]; then
            sudo snap install lxd --channel=5.21/stable
            sudo usermod -aG lxd "$USER"
            newgrp lxd
            lxd init --minimal
          fi

      - name: Install dependencies
        run: |
          sudo apt -y install tox
          if [ ! -d "$HOME/.local/share/juju" ]; then
            sudo snap install juju --channel=3.4/stable
            mkdir -p ~/.local/share/juju
            juju bootstrap localhost localhost
          fi

          sudo snap install --classic juju-crashdump

      - name: Run the tests
        run: |
          date
          mv ~/artifacts/*.charm ./
          if [[ -f "./${{ matrix.part }}/src/tox.ini" ]]; then
            tox -c ${{ matrix.part }}/src -e func-target -- noble-caracal
          else
            tox -c ${{ matrix.part}} -e func-target -- noble-caracal
          fi

      - name: Generate crash dumps
        if: failure()
        run: |
          models=$(juju models | grep zaza | awk '{print $1}' | tr -d '*')
          rm -rf ./crashdumps
          mkdir ./crashdumps
          for model in $models; do
            juju-crashdump -m $model -o ./crashdumps
          done

      - name: Upload artifacts on failure
        uses: actions/upload-artifact@v3
        with:
          name: crashdumps
          path: "./crashdumps/*"
        if: failure()

      - name: Tear down models
        if: always()
        run: |
          models=$(juju models | grep zaza | awk '{print $1}' | tr -d '*')
          for model in $models; do
            juju destroy-model --no-prompt --force --destroy-storage $model
          done
